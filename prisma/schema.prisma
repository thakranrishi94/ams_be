generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}
enum alumniRequestStatus {
  PENDING
  REJECTED
  APPROVED
}
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String @unique
  password String
  role     Role
  status   Status @default(ACTIVE)

  alumni  Alumni?
  faculty Faculty?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventRequests EventRequest[]

}

enum Role {
  ALUMNI
  FACULTY
  ADMIN
}

model Alumni {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  course       String
  batch        String
  designation  String
  organization String
  skills       String
  image        String?
  linkedin     String?
  instagram    String?
  facebook     String?
  bio          String?
  requestStatus alumniRequestStatus @default(PENDING)
  eventRequests EventRequest[]
  certificate Certificate[]
  JobOpportunity JobOpportunity[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  user        User   @relation(fields: [userId], references: [id])
  designation String
  school      String
  image       String? 
  eventRequests EventRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum EventType {
  WEBINAR
  WORKSHOP
  SEMINAR
  LECTURE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
model EventRequest {
  eventRequestId     Int     @id @default(autoincrement())
  alumniId           Int?    // Changed to optional by adding ?
  facultyId          Int?    
  adminId            Int?    
  eventTitle         String  @db.VarChar(255)
  eventDescription   String  @db.Text
  eventType          EventType
  eventDate          DateTime
  eventTime          DateTime
  eventDuration      String  @db.VarChar(50)
  eventLink          String? @db.VarChar(255)
  targetAudience     String  @db.VarChar(255)
  requestStatus      RequestStatus @default(PENDING)
  eventAgenda        String  @db.Text
  specialRequirements String @db.Text

  alumni             Alumni?  @relation(fields: [alumniId], references: [id])
  faculty            Faculty? @relation(fields: [facultyId], references: [id])
  admin              User?    @relation(fields: [adminId], references: [id])

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  certificate        Certificate[]
  eventPost          EventPost[]

}

model Certificate {
  id             Int            @id @default(autoincrement())
  eventId        Int
  event          EventRequest   @relation(fields: [eventId], references: [eventRequestId])
  alumniId         Int
  alumni           Alumni           @relation(fields: [alumniId], references: [id])
  certificateUrl String
  issuedAt       DateTime       @default(now())
  issuerId       Int?           // Can be admin/faculty ID
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([eventId, alumniId])
}

model CertificateTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  templateUrl String
  createdAt   DateTime @default(now())
  active      Boolean  @default(true)
}

model JobOpportunity {
  id              Int       @id @default(autoincrement())
  alumniId        Int       // Alumni who posted the job
  alumni          Alumni    @relation(fields: [alumniId], references: [id])
  title           String    @db.VarChar(255)
  company         String    @db.VarChar(255)
  location        String    @db.VarChar(255) // Remote, Hybrid, On-site
  jobType         JobType   // Full-time, Part-time, Internship, Freelance
  description     String    @db.Text
  requirements    String    @db.Text // Skills required
  salaryRange     String?   @db.VarChar(50) // Optional salary range
  applicationLink String?   @db.VarChar(255) // Optional external application link
  lastDateToApply DateTime  // Deadline for application
  requestStatus   JobRequestStatus @default(PENDING) // Admin approval
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  FREELANCE
}

enum JobRequestStatus {
  PENDING
  APPROVED
  REJECTED
}


model EventPost {
  id            Int            @id @default(autoincrement())
  eventId       Int            @unique
  event         EventRequest   @relation(fields: [eventId], references: [eventRequestId])
  title         String         @db.VarChar(255)
  description   String         @db.Text
  location      String
  issuerId      Int?
  startTime     DateTime
  endTime       DateTime
  brochureImage String?
  attendance    String?
  eventImages        EventImage[]        // One-to-Many relation to store multiple images
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model EventImage {
  id         Int      @id @default(autoincrement())
  url        String   @db.VarChar(255)
  eventPost  EventPost @relation(fields: [eventPostId], references: [id], onDelete: Cascade)
  eventPostId Int
}
