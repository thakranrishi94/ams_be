generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}
enum alumniRequestStatus {
  PENDING
  REJECTED
  APPROVED
}
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  phone    String @unique
  password String
  role     Role
  status   Status @default(ACTIVE)

  alumni  Alumni?
  faculty Faculty?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ALUMNI
  FACULTY
  ADMIN
}

model Alumni {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id])
  course       String
  batch        String
  designation  String
  organization String
  skills       String
  image        String?
  requestStatus alumniRequestStatus @default(PENDING)
  eventRequests EventRequest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  user        User   @relation(fields: [userId], references: [id])
  designation String
  school      String
  eventRequests EventRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum EventType {
  WEBINAR
  WORKSHOP
  SEMINAR
  LECTURE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
model EventRequest {
  eventRequestId     Int     @id @default(autoincrement())
  alumniId           Int     
  facultyId          Int?    
  eventTitle         String  @db.VarChar(255)
  eventDescription   String  @db.Text
  eventType          EventType
  eventDate          DateTime
  eventTime          DateTime
  eventDuration      String  @db.VarChar(50)
  eventLink          String? @db.VarChar(255)
  targetAudience     String  @db.VarChar(255)
  requestStatus      RequestStatus @default(PENDING)
  eventAgenda        String  @db.Text
  specialRequirements String @db.Text

  alumni             Alumni  @relation(fields: [alumniId], references: [id])
  faculty           Faculty? @relation(fields: [facultyId], references: [id])

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

